openapi: "3.0.2"
info:
  title: Personify Service API
  description: A Personify Service API for User
  version: "V1"
  contact:
    name: Nithin
    email: gnknithin@gmail.com
servers:
  - url: http://localhost:8888
    description: Local environment
  - url: http://localhost
    description: Production environment
paths:
  /health:
    get:
      tags:
        - System
      security: []
      summary: System Check
      description: Returns Ok for successful response
      responses:
        200:
          $ref: "#/components/responses/BaseSuccess"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
  /api/v1/signup:
    post:
      tags:
        - User
      security: []
      summary: Sign Up
      description: Creates a new user entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpSchema"
      responses:
        201:
          description: Created User Successfully
          headers:
            X-User-Id:
              description: User ID
              schema:
                type: string
                example: fhds98ew89y234hrfwou
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
  /api/v1/signin:
    post:
      tags:
        - User
      security: []
      summary: Sign In
      description: Logs user into the system
      requestBody:
        required: true
        description: Details required for user to login
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInSchema"
      responses:
        200:
          description: Return Bearer Token Successfully
          headers:
            Authorization:
              description: Bearer token
              schema:
                type: string
                example: Bearer fhds98ew89y234hrfwou
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
  /api/v1/contact:
    get:
      tags:
        - Contact
      parameters:
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
      summary: List Contacts
      description: List all the user contacts based on parameter
      responses:
        200:
          $ref: "#/components/responses/UserContactsList"
        204:
          $ref: "#/components/responses/NoContent"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    post:
      tags:
        - Contact
      summary: Create Contact
      description: Create a Contact for an user
      requestBody:
        $ref: "#/components/requestBodies/createUpdateContact"
      responses:
        201:
          description: Created User Successfully
          headers:
            location:
              description: URL to get the created contact
              schema:
                type: string
                example: "/api/v1/contact/{contact_id}"
            X-Contact-Id:
              description: Contact ID
              schema:
                type: string
                example: fhds98ew89y234hrfwou
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
  /api/v1/contact/{contact_id}:
    parameters:
      - $ref: "#/components/parameters/contactIdParam"
    get:
      tags:
        - Contact
      summary: Find Contact By Id
      description: For valid ID, retrieves the contact details
      responses:
        200:
          $ref: "#/components/responses/UserContactDetail"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    put:
      tags:
        - Contact
      summary: Update Contact By Id
      description: Update a contact for a valid user
      responses:
        200:
          $ref: "#/components/responses/UserContactDetail"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - Contact
      summary: Delete Contact By Id
      description: Delete user contact based on Id
      responses:
        200:
          $ref: "#/components/responses/BaseSuccess"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    BaseSuccessSchema:
      type: object
      properties:
        success:
          type: boolean
          description: Validity of this data envelope In case of failure it will return FALSE
          example: true
      required:
        - success
    BadRequestSchema:
      type: object
      properties:
        errors:
          type: array
          description: Reason for failed request (sender). Could be a string or a dictionary
          example: ["Bad parameter input format"]
          items:
            type: string
        success:
          type: boolean
          description: Result status of service call - SHOULD BE FALSE
          example: false
      required:
        - success
    NotFoundSchema:
      type: object
      properties:
        errors:
          type: array
          description: Reason for failed request (sender). Could be a string or a dictionary
          example: [Bad parameter input content]
          items:
            type: string
        success:
          type: boolean
          description: Result status of service call - SHOULD BE FALSE
          example: false
      required:
        - success
    ServerErrorSchema:
      type: object
      properties:
        errors:
          type: array
          description: Reason for failed request (sender). Could be a string or a dictionary
          example: [Server timeout - please try again]
          items:
            type: string
        success:
          type: boolean
          description: Result status of service call - SHOULD BE FALSE
          example: false
      required:
        - success
    UnauthorizedErrorSchema:
      description: Access token is missing or invalid
    SignUpSchema:
      type: object
      properties:
        username:
          type: string
          example: theUser
        password:
          type: string
          example: "12345"
        full_Name:
          type: string
          example: John
        date_of_birth:
          type: string
          format: date
        email:
          type: string
          example: john@email.com
      required:
        - username
        - password
        - full_name
        - date_of_birth
    SignInSchema:
      type: object
      properties:
        username:
          type: string
          example: theUserName
        password:
          type: string
          example: theUserPassword
      required:
        - username
        - password
    createUpdateContact:
      type: object
      properties:
        full_Name:
          type: string
          example: John
        date_of_birth:
          type: string
          format: date
        email:
          type: string
          example: john@email.com
        mobile:
          type: string
          example: +9123913323
      required:
        - full_name
        - date_of_birth
        - mobile
        - email
    contactInfo:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        contact_id:
          type: string
        full_Name:
          type: string
          example: John
        date_of_birth:
          type: string
          format: date
        email:
          type: string
          example: john@email.com
        mobile:
          type: string
          example: +9123913323
      required:
        - created_at
        - updated_at
        - contact_id
        - full_name
    UserContactDetail:
      type: object
      properties:
        success:
          type: boolean
          description: Validity of this data envelope In case of failure it will return FALSE
          example: true
        data:
          $ref: "#/components/schemas/contactInfo"
      required:
        - success
        - data
    UserContactsList:
      type: object
      properties:
        success:
          type: boolean
          description: Validity of this data envelope In case of failure it will return FALSE
          example: true
        data:
          type: array
          items:
            $ref: "#/components/schemas/contactInfo"
      required:
        - success
        - data
  requestBodies:
    createUpdateContact:
      description: A JSON object containing contact information
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/createUpdateContact"
  responses:
    UserContactsList:
      description: Successfully returnes user contacts
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserContactsList"
    UserContactDetail:
      description: Successfully returnes contact details
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserContactDetail"
    NoContent:
      description: No Content
    BaseSuccess:
      description: Returns Ok with Successful Response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseSuccessSchema"
    BadRequest:
      description: Bad Request or Invalid request format
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BadRequestSchema"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UnauthorizedErrorSchema"
    NotFound:
      description: Not Found or Invalid request content
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotFoundSchema"
    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ServerErrorSchema"
  parameters:
    contactIdParam:
      name: contact_id
      in: path
      description: The Contact ID Of a User
      required: true
      schema:
        type: string
    offsetParam:
      name: offset
      in: query
      description: Specifies the page number of the documents to be displayed
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
    limitParam:
      name: limit
      in: query
      description: Limits the number of items on a page
      required: false
      schema:
        type: integer
        minimum: 1
        default: 5
